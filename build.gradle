plugins {
    id "java"
    id "idea"
    id "io.freefair.lombok" version "$lombokVersion"
    id "org.springframework.boot" version "$springBootVersion"

}
apply plugin: "java"
apply plugin: "io.spring.dependency-management"

group "org.abondar.experimental"
version "1.0-SNAPSHOT"

bootJar {
    archivesBaseName = "articleManager"
}


repositories {
    mavenCentral()
}


dependencies {

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-neo4j"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "software.amazon.awssdk:s3:$awsVersion"
    implementation "com.vaadin:vaadin-spring-boot-starter:$vaadinVersion"
  

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.testcontainers:junit-jupiter:$testConVersion"
    testImplementation "org.testcontainers:localstack:$testConVersion"
    testImplementation "org.testcontainers:neo4j:$testConVersion"

}

test {
    useJUnitPlatform(){
        excludeTags "integration"
    }
}


tasks.register("integrationTest",Test){
    useJUnitPlatform{
        includeTags "integration"
    }
}

tasks.register('composeUp', Exec) {
    commandLine "docker-compose", "up", "-d"
}

tasks.register("composeDown", Exec) {
    commandLine "docker-compose", "down"
}


def createS3Bucket = {
    exec {
        commandLine "aws", "--endpoint-url=http://localhost:4566", "s3api", "create-bucket", "--bucket", "articles", "--region", "us-east-1"
        environment "AWS_ACCESS_KEY_ID", "test"
        environment "AWS_SECRET_ACCESS_KEY", "test"
    }
}

tasks.register("createS3Bucket") {
    dependsOn "composeUp"
    doLast {
        sleep(5000)
        createS3Bucket()
    }
}

bootRun {
    dependsOn "composeUp"
}

bootRun.finalizedBy("composeDown")